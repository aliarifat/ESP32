#include <WiFi.h>


// Replace with your network credentials
const char* ssid = "Your SSID";
const char* password = "Your password";


WiFiServer server(80);


// Variable to store the HTTP request
String header;


int relayPin = 13;               // choose the pin for the relay
int inputPin = 5;                // choose the input pin (for IR obstacle sensor)


int val = 0;                    
String string_variable = "";    // string variable to store the doorlock status
String icon_variable = "";      // string variable to store the icon HTML


// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0;


const long timeoutTime = 2000;


void setup() {
  pinMode(relayPin, OUTPUT);    
  pinMode(inputPin, INPUT);     


  Serial.begin(9600);
  // Connect to a Wi-Fi network with your own SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print the device's IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
}


void loop() {
  val = digitalRead(inputPin);  


  if (val == LOW) {             // check if the IR obstacle sensor value is LOW
    digitalWrite(relayPin, HIGH);  // turn relay ON
    string_variable = "The door is Opened";
    icon_variable = "<i class='fas fa-door-open' style='color:green; font-size: 100px;'></i>";
  } else {
    digitalWrite(relayPin, LOW); // turn relay OFF
    string_variable = "The door is Closed";
    icon_variable = "<i class='fas fa-door-closed' style='color:red; font-size: 100px;'></i>";
  }


  delay(200);


  WiFiClient client = server.available();   // Listen for all incoming clients


  if (client) {                             // If there is a new client connected
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");          
    String currentLine = "";                // make an empty String that will hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // loop while the client's connected
      currentTime = millis();
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          //If the current line is blank, you have two newline characters in a row.
          //That's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
           
            // turns the GPIOs on and off
                       
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // Adding Font Awesome CDN link
            client.println("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">");
            client.println("<meta http-equiv=\"refresh\" content=\"0.5\" >");
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}</style>");
           
            // Web Page Heading
            client.println("<body><h1>ESP32 Web Server for Door Lock Monitoring</h1>");
           
            client.println("<p>" + string_variable + "</p>");
            client.println(icon_variable);
            client.println("</body></html>");
           
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
