#include <WiFi.h>


// Replace with your network credentials
const char* ssid = "ssid";
const char* password = "password";


WiFiServer server(80);


// Variable to store the HTTP request
String header;


// Assign output variables to GPIO pins
const int sensorPin = 13;     // the number of the sensor pin
int PirState;


// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0;


const long timeoutTime = 2000;


void setup() {
  Serial.begin(115200);


  pinMode(sensorPin, INPUT);
 
  // Connect to Wi-Fi network with your own SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print the device's IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
}


void loop() {
  PirState = digitalRead(sensorPin);
  delay(200);
  Serial.println(PirState);
  Serial.println(WiFi.localIP());


  WiFiClient client = server.available();   // Listen for all incoming clients


  if (client) {                             // If there is a new client connected
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");          // print a message in the serial port indicating new client
    String currentLine = "";                // make an empty String that will hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // loop while the client's connected
      currentTime = millis();
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
           
            // turns the GPIOs on and off
                       
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<meta http-equiv=\"refresh\" content=\"0.5\" >");
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}</style>");
           
            // Web Page Heading
            client.println("<body><h1>ESP32 Web Server</h1>");
           
            // Display current PIR sensor state
            client.println("<p>PIR Sensor State: ");
            client.println(PirState);
            client.println("</p>");
           
            client.println("</body></html>");
           
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}

